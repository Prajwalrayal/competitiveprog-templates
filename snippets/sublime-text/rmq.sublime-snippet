<snippet>
	<content><![CDATA[
	template<typename T, bool maximum_mode = false>
	struct RMQ {
		int n = 0;
		vector<vector<T>> range_min;
		RMQ(const vector<T> &values = {}) {
			if (!values.empty())
				build(values);
		}
		static int highest_bit(int x) {
			return x == 0 ? -1 : 31 - __builtin_clz(x);
		}
		static T better(T a, T b) {
			return maximum_mode ? max(a, b) : min(a, b);
		}
		void build(const vector<T> &values) {
			n = int(values.size());
			int levels = highest_bit(n) + 1;
			range_min.resize(levels);
			for (int k = 0; k < levels; k++)
				range_min[k].resize(n - (1 << k) + 1);
			if (n > 0)
				range_min[0] = values;

			for (int k = 1; k < levels; k++)
				for (int i = 0; i <= n - (1 << k); i++)
					range_min[k][i] = better(range_min[k - 1][i], range_min[k - 1][i + (1 << (k - 1))]);
		}
		void show() const {
			for (int i = 0; i < int(range_min.size()); i++) {
				for (int j = 0; j < int(range_min[0].size()); j++) {
					cout << range_min[i][j] << " \n"[j + 1 == range_min[0].size()];
				}
			}
		}
		T query_value(int from, int to) const {
			assert(0 <= from && from <= to && to <= n - 1);
			int lg = highest_bit(to - from + 1);
			return better(range_min[lg][from], range_min[lg][to - (1 << lg) + 1]);
		}
	};
]]>
	

</content>
	<tabTrigger>RMQ</tabTrigger>
	<scope>source.c++</scope>
</snippet>
